[{"name":"app.R","content":"# app.R\r\n\r\nlibrary(shiny)\r\nlibrary(shinyalert)\r\nlibrary(shinyWidgets)\r\n\r\n# Filter Save Module ---------------------\r\n# UI function for Filter Save Module\r\nfilterSaveUI <- function(id) {\r\n  ns <- NS(id)\r\n  actionButton(ns(\"show_alert\"), \"Click to Show Alert\")\r\n}\r\n\r\n# Server function for Filter Save Module\r\nfilterSaveServer <- function(id, intern) {\r\n  moduleServer(id, function(input, output, session) {\r\n    ns <- session$ns\r\n    \r\n    # Show shinyalert when the button is clicked\r\n    observeEvent(input$show_alert, {\r\n      shinyalert(\r\n        title = \"Save Filter\",\r\n        html = TRUE,\r\n        text = tagList(\r\n          textInput(ns(\"saveFilterName\"), \"Name\"), \r\n          actionButton(ns(\"saveFilterButton\"), \"Save now\")\r\n        ),\r\n        showConfirmButton = FALSE,\r\n        closeOnClickOutside = TRUE,\r\n        closeOnEsc = TRUE\r\n      )\r\n    })\r\n    \r\n    # Handle saving the filter\r\n    observeEvent(input$saveFilterButton, {\r\n      filter_name <- input$saveFilterName\r\n      \r\n      if (filter_name != \"\") {\r\n        intern$savedFilter[[filter_name]] <- filter_name\r\n        shinyalert::closeAlert()\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Filter Display Module --------------------\r\n\r\nfilterDisplayUI <- function(id) {\r\n  ns <- NS(id)\r\n  tagList(\r\n    uiOutput(ns(\"savedFilterRow\")),\r\n    actionButton(ns(\"deleteFilterButton\"), \"Delete Selected Filter\")\r\n  )\r\n}\r\n\r\n# Server function for Filter Display Module\r\nfilterDisplayServer <- function(id, intern) {\r\n  moduleServer(id, function(input, output, session) {\r\n    ns <- session$ns\r\n    \r\n    # Render the saved filters as radio buttons\r\n    output$savedFilterRow <- renderUI({\r\n      req(intern$savedFilter)\r\n      namen <- names(intern$savedFilter)\r\n      if (length(namen) == 0) return(NULL)\r\n      \r\n      radioGroupButtons(\r\n        inputId = ns(\"savedFilterSelection\"), \r\n        label = \"Saved Filter\", \r\n        choices = namen, \r\n        selected = \"\"\r\n      )\r\n    })\r\n    \r\n    # Observe the delete button click\r\n    observeEvent(input$deleteFilterButton, {\r\n      selected_filter <- input$savedFilterSelection\r\n      if (!is.null(selected_filter) && selected_filter != \"\") {\r\n        intern$savedFilter[[selected_filter]] <- NULL  # Delete the selected filter\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n# APP UI ------------------------------------------------------------\r\nui <- fluidPage(\r\n  useShinyalert(),  # Initialize shinyalert in the app\r\n  \r\n  titlePanel(\"Modular Shiny App with Saved Filters\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      filterSaveUI(\"filterSave\"),  # Use the Filter Save Module UI\r\n      filterDisplayUI(\"filterDisplay\")  # Use the Filter Display Module UI\r\n    ),\r\n    \r\n    mainPanel(\r\n      textOutput(\"filter_name\")\r\n    )\r\n  )\r\n)\r\n\r\n# APP SERVER ----------------------------------------------\r\nserver <- function(input, output, session) {\r\n  \r\n  # Internal storage for saved filters\r\n  intern <- reactiveValues(savedFilter = list())\r\n  \r\n  # Call the Filter Save Module\r\n  filterSaveServer(\"filterSave\", intern)\r\n  \r\n  # Call the Filter Display Module\r\n  filterDisplayServer(\"filterDisplay\", intern)\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"desktop.ini","content":"[.ShellClassInfo]\r\nIconResource=C:\\Program Files\\Google\\Drive File Stream\\95.0.2.0\\GoogleDriveFS.exe,26\r\n","type":"text"}]
